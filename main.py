import telebot
from random import shuffle
import configparser
from telebot import types, custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from data_base_conn import get_db_connection
from data_base_hand import (
    create_db,
    ensure_user_exists,
    filling_in_the_general_dictionary,
    add_word_to_user,
    delete_user_word,
    get_random_words,
    check_word_existence,
    check_existence_of_a_word_in_a_personal_dictionary,
    number_of_words_studied_by_the_user,
)
from func import check_for_russian_letters


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
get_db_connection()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
create_db()

state_storage = StateMemoryStorage()

config = configparser.ConfigParser()
config.read("settings.ini")
token_bot = config["Tokens"]["tg_bot_token"]
bot = telebot.TeleBot(token_bot, state_storage=state_storage)

ensure_user_exists(bot.get_me().id, bot.get_me().username)


class Command:
    ADD_WORD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
    DELETE_WORD = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô"
    NEXT = "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚û°Ô∏è"


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    other_word = State()
    adding_new_word = State()
    savind_new_word = State()
    deleting_word = State()


common_words = [
    ("Peace", "–ú–∏—Ä"),
    ("Green", "–ó–µ–ª—ë–Ω—ã–π"),
    ("White", "–ë–µ–ª—ã–π"),
    ("Hello", "–ü—Ä–∏–≤–µ—Ç"),
    ("Car", "–ú–∞—à–∏–Ω–∞"),
    ("Sky", "–ù–µ–±–æ"),
    ("Tree", "–î–µ—Ä–µ–≤–æ"),
    ("Book", "–ö–Ω–∏–≥–∞"),
    ("Love", "–õ—é–±–æ–≤—å"),
    ("Friend", "–î—Ä—É–≥"),
]


filling_in_the_general_dictionary(common_words)


@bot.message_handler(commands=["start", "cards"])
def send_welcome(message):
    cid = message.chat.id
    username = message.chat.username or "Unknown"
    ensure_user_exists(cid, username)

    bot.send_message(
        cid,
        f"–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é, {message.from_user.first_name}! \n–Ø {bot.get_me().first_name}! "
        f"–ù–∞—á–Ω–µ–º –∏–∑—É—á–∞—Ç—å —è–∑—ã–∫\n–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, "
        f"–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "
        f"—Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: \n"
        f"–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï\n"
        f"–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô\n"
        f"–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚û°Ô∏è\n"
        f"–ü—Ä–∏—Å—Ç—É–ø–∏–º ‚¨áÔ∏è",
        parse_mode="html",
    )

    send_main_menu(cid)


def create_cards(message):
    cid = message.chat.id

    words = get_random_words(message.from_user.id, limit=4)

    if not words or len(words) < 4:
        bot.send_message(
            cid, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤!\n–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'."
        )
        return

    target_word, translate_word = words[0]
    other_words = [word[0] for word in words[1:]]

    options = [target_word] + other_words
    shuffle(options)

    markup = types.ReplyKeyboardMarkup(row_width=2)
    btns = [types.KeyboardButton(option) for option in options]
    btns.append(types.KeyboardButton(Command.NEXT))
    btns.append(types.KeyboardButton(Command.ADD_WORD))
    btns.append(types.KeyboardButton(Command.DELETE_WORD))
    markup.add(*btns)

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(user_id=message.from_user.id, chat_id=cid) as data:
        data["target_word"] = target_word
        data["translate_word"] = translate_word

    bot.send_message(
        cid, f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: \n{translate_word}", reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_word(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word_start(message):
    cid = message.chat.id
    bot.set_state(
        user_id=message.from_user.id, chat_id=cid, state=MyStates.adding_new_word
    )
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")


@bot.message_handler(state=MyStates.adding_new_word)
def add_word_translate(message):
    cid = message.chat.id
    word = message.text.strip().capitalize()

    if check_for_russian_letters(word=word) == False:
        bot.send_message(cid, f"–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤")
        return

    if check_word_existence(word):
        bot.send_message(
            cid,
            f'–°–ª–æ–≤–æ "{word}" —É–∂–µ –µ—Å—Ç—å –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ',
        )
        return
    elif check_existence_of_a_word_in_a_personal_dictionary(
        message.from_user.id, word=word
    ):
        bot.send_message(
            cid,
            f'–°–ª–æ–≤–æ "{word}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ',
        )
        return

    with bot.retrieve_data(message.from_user.id, cid) as data:
        data["target_word"] = word

    bot.set_state(message.from_user.id, chat_id=cid, state=MyStates.savind_new_word)
    bot.send_message(cid, f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ "{word}":')


@bot.message_handler(state=MyStates.savind_new_word)
def save_new_word(message):
    cid = message.chat.id
    translate = message.text.strip().capitalize()

    if not translate:
        bot.send_message(
            cid, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥"
        )
        return
    
    if check_for_russian_letters(translate):
        bot.send_message(cid, f'–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤')
        return
    try:
        with bot.retrieve_data(message.from_user.id, cid) as data:
            target_word = data["target_word"].capitalize()

        if not target_word:
            bot.send_message(cid, "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")
            bot.delete_state(user_id=message.from_user.id, chat_id=cid)
            return

        add_word_to_user(message.from_user.id, target_word, translate)
        count_words_user = number_of_words_studied_by_the_user(message.from_user.id)
        bot.send_message(
            cid,
            f"–°–ª–æ–≤–æ '{target_word}' –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ '{translate}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!"
            f"–ö–æ–ª–∏—á–µ—Ç—Å–≤–æ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤: {count_words_user}",
        )
        bot.delete_state(user_id=message.from_user.id, chat_id=cid)
    except Exception as e:
        bot.send_message(
            cid, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ {e}"
        )
    finally:

        send_main_menu(cid)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word_start(message):
    cid = message.chat.id
    bot.set_state(
        user_id=message.from_user.id, chat_id=cid, state=MyStates.deleting_word
    )
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ")


@bot.message_handler(state=MyStates.deleting_word)
def delete_word(message):
    cid = message.chat.id
    word_to_delete = message.text.strip().capitalize()

    word_to_delete_def = delete_user_word(message.from_user.id, word_to_delete)

    if word_to_delete_def:
        bot.send_message(
            cid, f'–°–ª–æ–≤–æ "{word_to_delete_def[0]}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è'
        )
        send_main_menu(cid)
    else:
        bot.send_message(cid, f'–°–ª–æ–≤–æ "{word_to_delete}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ')
        send_main_menu(cid)


def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    btns = [
        types.KeyboardButton(Command.NEXT),
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD),
    ]

    markup.add(*btns)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)


@bot.message_handler(func=lambda message: True, content_types=["text"])
def message_reply(message):
    cid = message.chat.id
    user_response = message.text

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data["target_word"]
        translate_word = data["translate_word"]
        attempts = data.get("attempts", 0)

        if not target_word or not translate_word:
            bot.send_message(cid, "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")
            return

        if user_response.strip().capitalize() == target_word.strip().capitalize():
            try:
                bot.send_message(
                    cid, f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n{target_word} => {translate_word}!"
                )
                send_main_menu(cid)
            except Exception as e:
                bot.send_message(
                    cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ"
                )
            finally:
                data.clear()
                return

        attempts += 1
        data["attempts"] = attempts
        if attempts < 3:
            bot.send_message(
                cid,
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.\n–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {translate_word}\n"
                f"–ü–æ–ø—ã—Ç–∫–∞ {attempts} –∏–∑ 3",
            )
        else:
            bot.send_message(
                cid,
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –∏—Å—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. \n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {target_word}",
            )
            data.clear()
            return


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(timeout=10, long_polling_timeout=5, skip_pending=True)
